%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 640
%%HiResBoundingBox: 0 0 2371.9199 639.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 639.12 re
W
q
[0.24 0 0 -0.24 0 639.12] cm
q
0 0 9883.333 2659.9355 re
W*
q
[13.247093 0 0 13.254061 -174.42738 -362.76367] cm
84.5 82.099998 m
93.5 82.099998 100.900002 75.400002 102.099998 66.699997 c
132.5 66.699997 l
145.5 85.5 l
146 86.199997 146.699997 86.5 147.5 86.5 c
221.2 86.5 l
222.5 86.5 223.59999 85.400002 223.59999 84.099998 c
223.59999 82.799995 222.49998 81.699997 221.2 81.699997 c
148.699997 81.699997 l
135.699997 62.899998 l
135.199997 62.199997 134.5 61.899998 133.699997 61.899998 c
102 61.899998 l
100.800003 53.199997 93.400002 46.5 84.400002 46.5 c
74.599998 46.5 66.600006 54.5 66.600006 64.300003 c
66.600006 74.100006 74.699997 82.099998 84.5 82.099998 c
h
84.5 51.400002 m
91.599998 51.400002 97.400002 57.200001 97.400002 64.300003 c
97.400002 71.400002 91.599998 77.200005 84.5 77.200005 c
77.400002 77.200005 71.599998 71.400002 71.599998 64.300003 c
71.599998 57.200005 77.300003 51.400002 84.5 51.400002 c
h
f
221.2 109.5 m
144.5 109.5 l
143.300003 100.800003 135.899994 94.099998 126.900002 94.099998 c
117.099998 94.099998 109.100006 102.099998 109.100006 111.899994 c
109.100006 121.699989 117.100006 129.699997 126.900009 129.699997 c
135.900009 129.699997 143.300003 123 144.500015 114.299995 c
221.20001 114.299995 l
222.50002 114.299995 223.60001 113.199997 223.60001 111.899994 c
223.60001 110.599998 222.5 109.5 221.2 109.5 c
h
126.900002 124.900002 m
119.800003 124.900002 114 119.099998 114 112 c
114 104.900002 119.800003 99 126.900002 99 c
134 99 139.800003 104.800003 139.800003 111.900002 c
139.800003 119.099998 134 124.900002 126.900002 124.900002 c
h
f
221.2 140.300003 m
154.299988 140.300003 l
153.499985 140.300003 152.699982 140.699997 152.199982 141.400009 c
142.799988 156.400009 l
101.599991 156.400009 l
91.399994 137.400009 l
90.999992 136.600006 90.199997 136.100006 89.299995 136.100006 c
67.699997 136.100006 l
66.5 127.400009 59.099998 120.700005 50.099998 120.700005 c
40.299999 120.700005 32.299999 128.700012 32.299999 138.5 c
32.299999 148.299988 40.299999 156.300003 50.099998 156.300003 c
59.099998 156.300003 66.5 149.600006 67.699997 140.900009 c
87.799995 140.900009 l
97.999992 159.900009 l
98.399994 160.700012 99.199989 161.200012 100.099991 161.200012 c
144.099991 161.200012 l
144.899994 161.200012 145.699997 160.800018 146.199997 160.100006 c
155.599991 145.100006 l
221.09999 145.100006 l
222.39999 145.100006 223.49998 144 223.49998 142.700012 c
223.60001 141.399994 222.5 140.300003 221.2 140.300003 c
h
50.099998 151.600006 m
43 151.600006 37.199997 145.800003 37.199997 138.700012 c
37.199997 131.600021 42.999996 125.800011 50.099998 125.800011 c
57.199997 125.800011 63 131.600006 63 138.700012 c
63.099998 145.800003 57.299999 151.600006 50.099998 151.600006 c
h
f
221.2 168.60001 m
182.60001 168.60001 l
181.70001 168.60001 180.90001 169.10001 180.5 169.8 c
169.10001 189.2 l
110.900009 189.2 l
109.700012 180.5 102.300011 173.8 93.300011 173.8 c
83.500008 173.8 75.500015 181.8 75.500015 191.60001 c
75.500015 201.40001 83.500015 209.40001 93.300018 209.40001 c
102.300018 209.40001 109.70002 202.70001 110.900017 194.00002 c
170.50002 194.00002 l
171.40001 194.00002 172.20001 193.50002 172.60002 192.80002 c
184.00002 173.40002 l
221.20001 173.40002 l
222.50002 173.40002 223.60001 172.30002 223.60001 171.00003 c
223.60001 169.7 222.5 168.60001 221.2 168.60001 c
h
93.300003 204.60001 m
86.200005 204.60001 80.400002 198.8 80.400002 191.70001 c
80.400002 184.60001 86.200005 178.80002 93.300003 178.80002 c
100.400002 178.80002 106.200005 184.60002 106.200005 191.70001 c
106.300003 198.8 100.5 204.60001 93.300003 204.60001 c
h
f
Q
q
[37.406536 0 0 37.426212 3286.0303 411.7435] cm
29.559999 37.720001 m
29.746666 38.146667 29.700001 38.580002 29.42 39.02 c
29.139999 39.459999 28.76 39.68 28.280001 39.68 c
1.640001 39.68 l
1.400001 39.68 1.173335 39.619999 0.960001 39.5 c
0.746668 39.380001 0.586668 39.226665 0.480001 39.040001 c
0.186668 38.613335 0.146668 38.173336 0.360001 37.720001 c
1.600001 34.800003 l
1.706668 34.533337 1.880001 34.320004 2.120001 34.160004 c
2.360001 34.000004 2.613335 33.920006 2.880001 33.920002 c
21.52 33.920002 l
14.960001 18.240002 l
9.6 31.040001 l
9.493334 31.306667 9.326667 31.513334 9.1 31.660002 c
8.873334 31.806669 8.613334 31.880003 8.320001 31.880001 c
4.960001 31.880001 l
4.453334 31.880001 4.053334 31.666668 3.760001 31.240002 c
3.653334 31.053335 3.586667 30.840002 3.56 30.600002 c
3.533334 30.360003 3.56 30.133337 3.64 29.920002 c
11.76 10.880001 l
11.866667 10.613335 12.033334 10.400002 12.26 10.240001 c
12.486667 10.08 12.746667 10 13.04 10.000001 c
16.880001 10.000001 l
17.173334 10.000001 17.433334 10.080001 17.660002 10.240001 c
17.886669 10.400001 18.053335 10.613334 18.160002 10.880001 c
29.559999 37.720001 l
h
57.388 27.120001 m
57.787998 27.120001 58.121334 27.253334 58.388 27.52 c
58.654667 27.786667 58.788002 28.106667 58.788002 28.48 c
58.788002 31.199999 l
58.788002 31.573332 58.654667 31.893332 58.388 32.16 c
58.121334 32.426666 57.787998 32.560001 57.388 32.560001 c
55.788002 32.560001 l
55.788002 37.960003 l
55.788002 38.333336 55.648003 38.660004 55.368004 38.940002 c
55.088005 39.220001 54.761337 39.360001 54.388004 39.360001 c
51.388004 39.360001 l
51.014671 39.360001 50.688004 39.220001 50.408005 38.940002 c
50.128006 38.660004 49.988007 38.333336 49.988007 37.960003 c
49.988007 32.560001 l
38.708008 32.560001 l
38.334675 32.560001 38.008007 32.426666 37.728008 32.16 c
37.448009 31.893332 37.30801 31.573332 37.30801 31.200001 c
37.30801 28.240002 l
37.30801 27.973335 37.388012 27.720001 37.548012 27.480001 c
48.708012 10.640001 l
48.814678 10.453335 48.974678 10.300001 49.188011 10.180001 c
49.401344 10.060001 49.62801 10.000001 49.868011 10.000001 c
54.388012 10.000001 l
54.761345 10.000001 55.088013 10.140001 55.368011 10.420001 c
55.64801 10.700001 55.78801 11.026668 55.78801 11.400002 c
55.78801 27.120003 l
57.388008 27.120003 l
57.388 27.120001 l
h
44.147999 27.120001 m
49.987999 27.120001 l
49.987999 18.48 l
44.147999 27.120001 l
h
71.176003 20.24 m
70.802673 20.24 70.476006 20.1 70.195999 19.82 c
69.915993 19.539999 69.775993 19.213333 69.776001 18.84 c
69.776001 11.4 l
69.776001 11.026666 69.916 10.7 70.195999 10.42 c
70.475998 10.14 70.802666 10.000001 71.176003 10 c
74.216003 10 l
74.616005 10 74.949333 10.14 75.216003 10.42 c
75.482674 10.7 75.616005 11.026667 75.616005 11.4 c
75.616005 18.84 l
75.616005 19.213333 75.482674 19.539999 75.216003 19.82 c
74.949333 20.1 74.616005 20.24 74.216003 20.24 c
71.176003 20.24 l
h
92.896004 10 m
93.269333 10 93.596001 10.14 93.876007 10.42 c
94.156013 10.7 94.296013 11.026667 94.296005 11.4 c
94.296005 38.279999 l
94.296005 38.653332 94.156006 38.98 93.876007 39.259998 c
93.596008 39.539997 93.269341 39.679996 92.896004 39.679996 c
89.856003 39.679996 l
89.456001 39.679996 89.122673 39.539997 88.856003 39.259998 c
88.589333 38.98 88.456001 38.653332 88.456001 38.279999 c
88.456001 27.719997 l
75.615997 27.719997 l
75.615997 38.279999 l
75.615997 38.653332 75.482666 38.98 75.215996 39.259998 c
74.949326 39.539997 74.615997 39.679996 74.215996 39.679996 c
71.175995 39.679996 l
70.802666 39.679996 70.475998 39.539997 70.195992 39.259998 c
69.915985 38.98 69.775986 38.653332 69.775993 38.279999 c
69.775993 23.32 l
69.775993 22.946667 69.915993 22.620001 70.195992 22.34 c
70.47599 22.059999 70.802658 21.92 71.175995 21.92 c
88.455994 21.92 l
88.455994 11.4 l
88.455994 11.026666 88.589325 10.7 88.855995 10.42 c
89.122665 10.14 89.455994 10.000001 89.855995 10 c
92.895996 10 l
92.896004 10 l
h
117.283997 34.119999 m
117.603996 34.226665 117.85733 34.406666 118.043999 34.66 c
118.230667 34.913334 118.323997 35.200001 118.323997 35.52 c
118.323997 38.599998 l
118.323997 39.026665 118.150665 39.386665 117.804001 39.68 c
117.537331 39.893333 117.244003 40 116.924004 40 c
116.790672 40 116.697342 39.986668 116.644005 39.959999 c
114.164001 39.48 112.03067 38.333332 110.244003 36.52 c
107.844002 34.066666 106.644005 30.84 106.644005 26.84 c
106.644005 11.440001 l
106.644005 11.04 106.784004 10.7 107.064003 10.42 c
107.344002 10.14 107.67067 10 108.044006 10 c
111.124008 10 l
111.52401 10 111.864006 10.14 112.144005 10.42 c
112.424004 10.7 112.564003 11.04 112.564003 11.440001 c
112.564003 26.92 l
112.564003 29.453333 113.284004 31.386667 114.724007 32.720001 c
115.470673 33.413334 116.324005 33.880001 117.284004 34.120003 c
117.283997 34.119999 l
h
131.084 10 m
131.484009 10 131.824005 10.14 132.104004 10.42 c
132.384003 10.7 132.524002 11.04 132.524002 11.440001 c
132.524002 26.84 l
132.524002 30.84 131.324005 34.066666 128.923996 36.52 c
127.137329 38.333336 125.003998 39.48 122.523994 39.959999 c
122.470657 39.986668 122.377327 40 122.243996 40 c
121.923996 40 121.630661 39.893333 121.363998 39.68 c
121.017334 39.413334 120.844002 39.040001 120.844002 38.560001 c
120.844002 35.480003 l
120.844002 35.186672 120.937332 34.913338 121.124001 34.660004 c
121.310669 34.40667 121.564003 34.226669 121.884003 34.120003 c
122.897331 33.826672 123.750664 33.360004 124.444 32.720001 c
125.884003 31.440001 126.604004 29.506668 126.604004 26.920002 c
126.604004 11.440002 l
126.604004 11.040002 126.744003 10.700002 127.024002 10.420002 c
127.304001 10.140002 127.644005 10.000002 128.044006 10.000002 c
131.084 10.000002 l
131.084 10 l
h
165.992004 24.360001 m
167.378677 25.213335 168.392 26.440001 169.032 28.040001 c
169.40533 28.893335 169.592 29.946669 169.592 31.200001 c
169.592 33.146667 169.07199 34.780003 168.032 36.100002 c
166.992004 37.420002 165.472 38.400002 163.472 39.040001 c
162.218658 39.466667 160.738663 39.68 159.031998 39.68 c
146.272003 39.68 l
145.898666 39.68 145.572006 39.540001 145.292007 39.260002 c
145.012009 38.980003 144.872009 38.653336 144.872009 38.280003 c
144.872009 35.400002 l
144.872009 35.000004 145.012009 34.660004 145.292007 34.380001 c
145.572006 34.099998 145.898666 33.959999 146.272003 33.960003 c
159.352005 33.960003 l
160.898682 33.960003 162.045349 33.680004 162.792007 33.120003 c
163.432007 32.58667 163.752014 31.860003 163.752014 30.940002 c
163.752014 30.020002 163.418686 29.266668 162.752014 28.680002 c
161.925339 27.960003 160.685349 27.600002 159.032013 27.600002 c
146.272018 27.600002 l
145.898682 27.600002 145.572021 27.460003 145.292023 27.180002 c
145.012024 26.900002 144.872025 26.560001 144.872025 26.160002 c
144.872025 23.400002 l
144.872025 23.026669 145.012024 22.700003 145.292023 22.420002 c
145.572021 22.140001 145.898682 22.000002 146.272018 22.000002 c
158.312012 22.000002 l
159.458679 22.000002 160.352005 21.800001 160.992004 21.400002 c
161.445328 21.133335 161.805328 20.746668 162.072006 20.240002 c
162.258667 19.866669 162.352005 19.433336 162.352005 18.940002 c
162.352005 18.446669 162.285339 18.000002 162.152008 17.600002 c
162.045334 17.280003 161.858673 16.98667 161.59201 16.720003 c
161.005341 16.053337 160.032013 15.720003 158.672012 15.720003 c
146.272018 15.720003 l
145.898682 15.720003 145.572021 15.580003 145.292023 15.300003 c
145.012024 15.020003 144.872025 14.680003 144.872025 14.280003 c
144.872025 11.400003 l
144.872025 11.026669 145.012024 10.700002 145.292023 10.420002 c
145.572021 10.140002 145.898682 10.000002 146.272018 10.000002 c
158.312012 10.000002 l
161.618683 10.000002 164.165344 10.933335 165.952011 12.800002 c
167.472015 14.320002 168.23201 16.226669 168.23201 18.520002 c
168.23201 20.973335 167.485336 22.920002 165.992004 24.360003 c
165.992004 24.360001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
